Clear up one minor issue with conceptualizing the stack (which grows downward from high to lower addresses by the way)


# Relevant Example of placing stuck on the stack.
# Give that $rsp is whever in memory
# (This incomplete excerpt taken from a depack stub from a polymorphed code. Can ignore the actually dnf goal)

  4000ad:       c7 44 24 fc 8a 11 11    mov    DWORD PTR [rsp-0x4],0x1111118a     ; Copy the value ONTO THE STACK. However notice here we us the pointer to the stack and subtract 4 bytes. 4 bytes because the value takes up exactly 4 bytes (2 bytes per digit pair)
  4000b4:       11 
  4000b5:       81 6c 24 fc 0b 10 10    sub    DWORD PTR [rsp-0x4],0x1010100b      ; We also do some math against that address   
  4000bc:       10 
  4000bd:       66 c7 44 24 fa 79 68    mov    WORD PTR [rsp-0x6],0x6879           ; we place this lower on the stack ((-4)+(-2)=-6). Notice it's 2 bytes more. The data value is 2 bytes
  4000c4:       66 81 44 24 fa 01 01    add    WORD PTR [rsp-0x6],0x101
  4000cb:       89 44 24 f6             mov    DWORD PTR [rsp-0xa],eax             ; NOTE that we place this data 10 bytes lower in the stack. Hex 0xA = decimal 10. I think they couldve used the decimal number here too but I'd need to verify again.
  4000cf:       c6 44 24 f8 01          mov    BYTE PTR [rsp-0x8],0x1                  ; This is affecting the 8 bytes lower in the stack. SO ACTUALLY data on the stack is right before the last instruction. Why they did it out of order? Not sure
  4000d4:       fe 44 24 f8             inc    BYTE PTR [rsp-0x8]




Graphical representation here
