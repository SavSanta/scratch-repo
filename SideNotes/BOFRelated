- https://www.trustedsec.com/blog/a-developers-introduction-to-beacon-object-files/ Lot of caveats here

- As of Windows 10 in 2022 and 2023 I am not able to use the version of Terminal Preview I have to compile. I must use Command Prompt.

- MSVC Compiler Options - https://learn.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically?view=msvc-170

- Visual Studio compilation order. Enter into Visual Studio environment and then use cl.exe with as few modifiers as necessary. (ime using extra like /TP which is for CPP caused issues on a pure C implementation)
     # 64-bit
     >"C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvars64.bat"
     >"C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe"  /c /GS- /Entry go /TP filehashbof.c /Fofilehashbof.x86.o 
     
     # 32-bit
     >"C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvars32.bat"
     >"C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x86\cl.exe"  /c /GS- /Entry go /TP filehashbof.c /Fofilehashbof.x64.o

- Alternative using Dev Console (x86 CPP by default) to write the object file specifically (essentialyl this is critical when failing to be able to ue that confusing BOF VS Code template and you still want to roll the compile by hand.
     cl.exe /c /GS- /TP lapsv2decrypt.cpp /Fo:newlapsdecrypt.x86.o

- Writing the BOFs need to make sure that the CRT functions are available in the current Visual Studio iteration. As Microsoft likes to try and mandate the 'unsafe' functions in the later versions of their release. Alternatively it seems like Precomp directives #define _CRT_SECURE_NO_WARNINGS
#define _CRT_NONSTDC_NO_DEPRECATE takes care of it. 

- These are just typedefs and super common: WINBASE, WINAPI, BOOL

- Speaking of BOOL. The WINBOOL wasnt able to be used. So just use BOOL.

- Search function for Win32 function signatures after installing mingw32 on Linux: 
     
- Nanodump from Fortra/HelpSystems is huge and prob a good reference for more complex BOF writing

- According to BofWdigest from Outflank.nl: Visual Studio (C++) does not support inline assembly for x64 processors.
 So in order to write a single Beacon Object File containing our compiled / assembled code code we must use the Mingw-w64 (GCC for Windows) compiler.

 - This is really for WIN32 C implementation moreso than BOFs but I dont want to make a new text file yet. Essentially the typedefs defined in WIN32 for LPWSTR and CONST LPWSTR. Seems to be due to wchar_t being not typedefed for WCHAR. Current workaround is just to manually replace those. Although, one could specify a define macro probably

- Forgetting to put a calling convention in the header file for an imported function results in [one of the many ways to trigger ] the unknown symbol error. Unknown symbol '_WEVTAPI$EvtNext@24'


- Super Weirdness with CS default BeaconPrint output with 16LE data
```
    LPSTR pszPath = NULL;
    wchar_t pwsPath[100];
    LPSTR pszQuery = NULL;
    wchar_t pwsQuery[100];
    LPSTR pszMessage = NULL;
    wchar_t pwsMessage[100];

    BeaconPrintf(CALLBACK_OUTPUT, "UTF16LEs: pwsPath - %ls, pwsQuery - %s, arg2 - %s", pwsPath, pwsQuery, argv[2]);
    
    //Output is with the specified format specifiers
    UTF16LEs: pwsPath - Security, pwsQuery - E, arg2 - /q
    
    // However this is no output. Unsure if it is due to the OUTPUT STREAM being different
    //BeaconPrintf(CALLBACK_ERROR, "Converted Stuff Hopefully %s - with a crapout of %d\n", argv[6], crapout);
    
```

- Issues it seems with x86 based object code. It appears a new set of Win32 "routines". (ie looks like piped to something assembly like?).

Script Console Output
```
[12:33:24] [!] Function call &beacon_inline_execute failed: can't run BOF: linker errors for UserSpecifiedFull:
Unknown symbol '__aullshr'
Unknown symbol '__aullrem'
Unknown symbol '__allmul'
```

New error "fatal error C1083: Cannot open include file: 'base\helpers.h': No such file or directory" occurs due to changes in Cobalt Strike/HelpSystems around version 4.9 and later when they explicitly explained how to use other languages to compile into BOFs.
They've now made a BOF-VS template located at github.com/Cobalt-Strike/bof-vs which has a whole host of helper crap necessary for some creators who use that template (likeSCUAMBypass)


One page states for one of these "The _allmul routine is a helper routine for the C compiler. Whether the compiler uses _allmul is completely dependent on the optimization set. This routine is used only on x86 platforms." (cite: https://learn.microsoft.com/en-us/windows/win32/devnotes/-win32-allmul)


